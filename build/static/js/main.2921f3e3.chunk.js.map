{"version":3,"sources":["app/reducers/actionsSlice.js","app/api-client.js","app/reducers/companiesThunks.js","Components/Alert/index.js","Containers/AddCompanyForm/index.js","Components/Company/index.js","app/reducers/companiesSlice.js","Containers/CompaniesList/index.js","Pages/Main/index.js","Pages/NoMatch/index.js","app/reducers/companySlice.js","Containers/CompanyView/index.js","Pages/CompanyDetail/index.js","Components/Office/index.js","app/reducers/officesSlice.js","Containers/OfficesList/index.js","Pages/CompanyOffices/index.js","Containers/CompanyRentSum/index.js","Pages/CompanyRent/index.js","Containers/ChangeHeadquarter/index.js","Pages/CompanyHeadquarter/index.js","Components/NavBar/index.js","App.js","app/store.js","index.js"],"names":["actionsSlice","createSlice","name","initialState","requestStatus","alert","undefined","reducers","setBusy","state","setIdle","setAlert","action","payload","clearAlert","actions","selectRequestStatus","selectAlert","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","process","response","json","data","ok","Promise","reject","message","get","post","put","patch","delete","pathPrefix","fetchCompanies","createAsyncThunk","results","fetchCompany","companyId","createCompany","updateHeadquarter","update","fetchCompanyRentSum","fetchOffices","Alert","alertType","className","role","MyTextInput","label","props","useField","field","meta","isError","touched","error","inputCN","cn","htmlFor","id","AddCompanyForm","useState","showForm","setShowForm","useSelector","dispatch","useDispatch","onSubmit","values","resetForm","resultAction","unwrapResult","console","r","setTimeout","initialValues","headquarter","street","postal_code","city","offices","validationSchema","Yup","max","required","formikProps","type","placeholder","validateOnChange","arrayHelpers","map","office","index","onClick","remove","push","disabled","Company","company","to","companiesAdapter","createEntityAdapter","getInitialState","status","companiesSlice","extraReducers","thunks","pending","fulfilled","upsertMany","rejected","newCompany","upsertOne","getSelectors","companies","selectAllCompanies","selectAll","selectTotal","CompaniesList","companiesStatus","useEffect","Main","NoMatch","location","useLocation","pathname","companyAdapter","companySlice","selectCompanyById","selectById","CompanyHeadquarter","properties","Object","entries","key","value","CompanyView","useParams","companyStatus","CompanyDetail","OfficeDetails","Office","officesAdapter","officesSlice","clearStorage","removeAll","selectAllOffices","OfficesList","officesStatus","CompanyOffices","CompanyRentSum","rentValue","setRentValue","originalPromiseResult","CompanyRent","ChangeHeadquarter","dropdownValue","setDropdownValue","length","find","headquarter_of","event","preventDefault","onChange","target","NavBar","exact","App","path","configureStore","reducer","companiesReducer","companyReducer","officesReducer","actionsReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.2921f3e3.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const actionsSlice = createSlice({\n  name: 'actions',\n  initialState: {\n    requestStatus: 'idle',\n    alert: undefined,\n  },\n  reducers: {\n    setBusy: (state) => {\n      state.requestStatus = 'pending';\n    },\n    setIdle: (state) => {\n      state.requestStatus = 'idle';\n    },\n    setAlert: (state, action) => {\n      state.alert = { ...action.payload };\n    },\n    clearAlert: (state, action) => {\n      state.alert = undefined;\n    },\n  },\n});\n\nexport const { setBusy, setIdle, setAlert, clearAlert } = actionsSlice.actions;\n\nexport const selectRequestStatus = (state) => state.actions.requestStatus;\n\nexport const selectAlert = (state) => state.actions.alert;\n\nexport default actionsSlice.reducer;\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' };\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  };\n\n  if (body) {\n    config.body = JSON.stringify(body);\n  }\n\n  try {\n    const response = await window.fetch(\n      `${process.env.REACT_APP_REST_SERVER_URL}${endpoint}`,\n      config\n    );\n    const data = await response.json();\n    if (response.ok) {\n      return data;\n    }\n    return Promise.reject(data.message);\n  } catch (err) {\n    return Promise.reject(err.message);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig });\n};\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body });\n};\n\nclient.put = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'PUT', body });\n};\n\nclient.patch = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'PATCH', body });\n};\n\nclient.delete = function (endpoint, body = {}, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'DELETE', body });\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { client } from '../api-client';\n\nconst pathPrefix = 'companies';\n\nexport const fetchCompanies = createAsyncThunk(\n  `${pathPrefix}/fetchCompanies`,\n  async () => {\n    const response = await client.get(`/${pathPrefix}/list/`);\n    return response.results;\n  }\n);\n\nexport const fetchCompany = createAsyncThunk(\n  `${pathPrefix}/fetchCompany`,\n  async (companyId) => {\n    return await client.get(`/${pathPrefix}/${companyId}/`);\n  }\n);\n\nexport const createCompany = createAsyncThunk(\n  `${pathPrefix}/createCompany`,\n  async (payload) => {\n    return await client.post(`/${pathPrefix}/`, { ...payload });\n  }\n);\n\nexport const updateHeadquarter = createAsyncThunk(\n  `${pathPrefix}/updateHeadquarter`,\n  async (update) => {\n    return await client.patch(`/${pathPrefix}/${update['id']}/headquarter/`, {\n      ...update,\n    });\n  }\n);\n\nexport const fetchCompanyRentSum = createAsyncThunk(\n  `${pathPrefix}/fetchCompanyRentSum`,\n  async (companyId) => {\n    return await client.get(`/${pathPrefix}/${companyId}/rent/`);\n  }\n);\n\nexport const fetchOffices = createAsyncThunk(\n  `${pathPrefix}/fetchOffices`,\n  async (companyId) => {\n    const response = await client.get(`/${pathPrefix}/${companyId}/offices/`);\n    return response.results;\n  }\n);\n","export default function Alert({ message, alertType }) {\n  return (\n    <div className={'alert ' + alertType} role=\"alert\">\n      {message}\n    </div>\n  );\n}\n","import { Formik, Form, useField, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport cn from 'classnames';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nimport {\n  clearAlert,\n  selectAlert,\n  selectRequestStatus,\n  setAlert,\n  setBusy,\n  setIdle,\n} from '../../app/reducers/actionsSlice';\nimport { createCompany } from '../../app/reducers/companiesThunks';\nimport Alert from '../../Components/Alert';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const isError = meta.touched && meta.error;\n  const inputCN = cn('form-control', { 'is-invalid': isError });\n\n  return (\n    <div className=\"row my-2\">\n      <label className=\"form-label\" htmlFor={props.id || props.name}>\n        {label}\n      </label>\n      <input className={inputCN} {...field} {...props} />\n      {isError ? <div className=\"invalid-feedback\">{meta.error}</div> : null}\n    </div>\n  );\n};\n\nexport default function AddCompanyForm() {\n  const [showForm, setShowForm] = useState(false);\n  const requestStatus = useSelector(selectRequestStatus);\n  const alert = useSelector(selectAlert);\n\n  const dispatch = useDispatch();\n\n  const onSubmit = async (values, { resetForm }) => {\n    if (requestStatus === 'idle') {\n      try {\n        dispatch(setBusy());\n        const resultAction = await dispatch(createCompany(values));\n        unwrapResult(resultAction);\n        dispatch(\n          setAlert({\n            message: 'Created successfully',\n            alertType: 'alert-success',\n          })\n        );\n        resetForm();\n        setShowForm(false);\n      } catch (err) {\n        console.error('Failed to create the company: ', err);\n      } finally {\n        dispatch(setIdle());\n        await new Promise((r) => setTimeout(r, 2000));\n        dispatch(clearAlert());\n      }\n    }\n  };\n\n  return (\n    <>\n      {alert && <Alert message={alert.message} alertType={alert.alertType} />}\n      {showForm && (\n        <div className=\"row justify-content-center mx-4 mb-3 p-2 border-bottom\">\n          <Formik\n            initialValues={{\n              name: '',\n              headquarter: {\n                street: '',\n                postal_code: '',\n                city: '',\n              },\n              offices: [],\n            }}\n            validationSchema={Yup.object({\n              name: Yup.string()\n                .max(100, 'Must be 100 characters or less')\n                .required('Required'),\n              headquarter: Yup.object({\n                street: Yup.string()\n                  .max(100, 'Must be 100 characters or less')\n                  .required('Required'),\n                postal_code: Yup.string()\n                  .max(30, 'Must be 30 characters or less')\n                  .required('Required'),\n                city: Yup.string()\n                  .max(100, 'Must be 100 characters or less')\n                  .required('Required'),\n              }),\n            })}\n            onSubmit={onSubmit}\n          >\n            {(formikProps) => (\n              <Form>\n                <MyTextInput\n                  label=\"Company Name:\"\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Google Inc\"\n                />\n                <h3>Headquarter info</h3>\n                <MyTextInput\n                  label=\"Street:\"\n                  name=\"headquarter.street\"\n                  type=\"text\"\n                  placeholder=\"\"\n                />\n                <MyTextInput\n                  label=\"Postal code:\"\n                  name=\"headquarter.postal_code\"\n                  type=\"text\"\n                  placeholder=\"\"\n                />\n                <MyTextInput\n                  label=\"City:\"\n                  name=\"headquarter.city\"\n                  type=\"text\"\n                  placeholder=\"\"\n                />\n                <h3>Offices:</h3>\n                <FieldArray name=\"offices\" validateOnChange={false}>\n                  {(arrayHelpers) => {\n                    return (\n                      <div className=\"my-2\">\n                        {formikProps.values.offices.map((office, index) => (\n                          <div key={index} className=\"my-3\">\n                            <MyTextInput\n                              label=\"Street:\"\n                              name={`offices[${index}].street`}\n                              type=\"text\"\n                              placeholder=\"\"\n                            />\n                            <MyTextInput\n                              label=\"Postal code:\"\n                              name={`offices[${index}].postal_code`}\n                              type=\"text\"\n                              placeholder=\"\"\n                            />\n                            <MyTextInput\n                              label=\"City:\"\n                              name={`offices[${index}].city`}\n                              type=\"text\"\n                              placeholder=\"\"\n                            />\n\n                            <button\n                              className=\"btn btn-danger\"\n                              type=\"button\"\n                              onClick={() => arrayHelpers.remove(index)}\n                            >\n                              Remove office\n                            </button>\n                          </div>\n                        ))}\n\n                        <button\n                          className=\"btn btn-secondary\"\n                          type=\"button\"\n                          onClick={() =>\n                            arrayHelpers.push({\n                              street: '',\n                              postal_code: '',\n                              city: '',\n                            })\n                          }\n                        >\n                          Add office\n                        </button>\n                      </div>\n                    );\n                  }}\n                </FieldArray>\n                <button\n                  className=\"btn btn-primary\"\n                  type=\"submit\"\n                  disabled={requestStatus === 'pending'}\n                >\n                  Submit\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      )}\n      {!showForm && (\n        <button\n          className=\"btn btn-success ms-3\"\n          type=\"button\"\n          onClick={() => setShowForm(true)}\n        >\n          Add company\n        </button>\n      )}\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\n\nexport default function Company({ company }) {\n  return (\n    <div\n      className=\"row justify-content-center mx-2 border-bottom\"\n      key={company.id}\n    >\n      <div className=\"col-3 align-self-center py-2 my-2 text-break\">\n        <Link className=\"btn btn-primary\" to={`/company/${company.id}/detail`}>\n          <b>{company.name}</b> detail\n        </Link>\n      </div>\n      <div className=\"col-3 align-self-center py-2 my-2 text-break\">\n        <Link className=\"btn btn-primary\" to={`/company/${company.id}/rent`}>\n          <b>{company.name}</b> rent sum\n        </Link>\n      </div>\n      <div className=\"col-3 align-self-center py-2 my-2 text-break\">\n        <Link\n          className=\"btn btn-secondary\"\n          to={`/company/${company.id}/offices`}\n        >\n          <b>{company.name}</b> offices\n        </Link>\n      </div>\n      <div className=\"col-3 align-self-center py-2 my-2 text-break\">\n        <Link\n          className=\"btn btn-secondary\"\n          to={`/company/${company.id}/headquarter`}\n        >\n          <b>{company.name}</b> headquarter\n        </Link>\n      </div>\n    </div>\n  );\n}\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport * as thunks from './companiesThunks';\n\nconst companiesAdapter = createEntityAdapter();\n\nconst initialState = companiesAdapter.getInitialState({\n  status: 'idle',\n});\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [thunks.fetchCompanies.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [thunks.fetchCompanies.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      companiesAdapter.upsertMany(state, action.payload);\n    },\n    [thunks.fetchCompanies.rejected]: (state, action) => {\n      state.status = 'failed';\n    },\n    [thunks.createCompany.fulfilled]: (state, action) => {\n      const newCompany = {\n        id: action.payload.id,\n        name: action.payload.name,\n      };\n\n      companiesAdapter.upsertOne(state, newCompany);\n    },\n  },\n});\n\nexport default companiesSlice.reducer;\n\nexport const {\n  selectAll: selectAllCompanies,\n  selectTotal: selectCompaniesCount,\n} = companiesAdapter.getSelectors((state) => state.companies);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nimport Alert from '../../Components/Alert';\nimport Company from '../../Components/Company';\nimport { fetchCompanies } from '../../app/reducers/companiesThunks';\nimport { selectAllCompanies } from '../../app/reducers/companiesSlice';\nimport { selectAlert, setAlert } from '../../app/reducers/actionsSlice';\n\nexport default function CompaniesList() {\n  const alert = useSelector(selectAlert);\n  const { status: companiesStatus } = useSelector((state) => state.companies);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (companiesStatus === 'idle') {\n      (async () => {\n        try {\n          const resultAction = await dispatch(fetchCompanies());\n          unwrapResult(resultAction);\n        } catch (err) {\n          dispatch(\n            setAlert({\n              message: `Failed to get companies: ${err.message}`,\n              alertType: 'alert-danger',\n            })\n          );\n        }\n      })();\n    }\n  }, [companiesStatus, dispatch]);\n\n  const companies = useSelector(selectAllCompanies);\n\n  return (\n    <div className=\"overflow-auto companies-list\">\n      {companiesStatus === 'loading' && (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"progress w-50\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated bg-secondary w-100\"\n              role=\"progressbar\"\n            >\n              Loading...\n            </div>\n          </div>\n        </div>\n      )}\n      {companiesStatus === 'succeeded' &&\n        companies.map((company) => (\n          <Company key={company.id} company={company} />\n        ))}\n      {companiesStatus === 'failed' && alert && (\n        <div className=\"d-flex justify-content-center\">\n          <Alert message={alert.message} alertType={alert.alertType} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import AddCompanyForm from '../../Containers/AddCompanyForm';\nimport CompaniesList from '../../Containers/CompaniesList';\n\nexport default function Main() {\n  return (\n    <>\n      <h2 className=\"text-center\">Companies list</h2>\n      <div className=\"container mt-4 px-0 pt-4 pb-2 shadow rounded border\">\n        <AddCompanyForm />\n        <CompaniesList />\n      </div>\n    </>\n  );\n}\n","import { useLocation } from 'react-router-dom';\n\nexport default function NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport * as thunks from './companiesThunks';\n\nconst companyAdapter = createEntityAdapter();\n\nconst initialState = companyAdapter.getInitialState({\n  status: 'idle',\n});\n\nexport const companySlice = createSlice({\n  name: 'company',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [thunks.fetchCompany.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [thunks.fetchCompany.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      companyAdapter.upsertOne(state, action.payload);\n    },\n    [thunks.fetchCompany.rejected]: (state, action) => {\n      state.status = 'failed';\n    },\n  },\n});\n\nexport default companySlice.reducer;\n\nexport const {\n  selectTotal: selectCompaniesCount,\n  selectById: selectCompanyById,\n} = companyAdapter.getSelectors((state) => state.company);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nimport { selectCompanyById } from '../../app/reducers/companySlice';\nimport { fetchCompany } from '../../app/reducers/companiesThunks';\nimport { setAlert } from '../../app/reducers/actionsSlice';\nimport Alert from '../../Components/Alert';\n\nconst CompanyHeadquarter = ({ data }) => {\n  const properties = Object.entries(data).map(([key, value]) => (\n    <li key={key} className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-4\">{key}</div>\n        <div className=\"col-8\">{value}</div>\n      </div>\n    </li>\n  ));\n\n  return <ul className=\"list-group\">{properties}</ul>;\n};\n\nexport default function CompanyView() {\n  const { companyId } = useParams();\n  const dispatch = useDispatch();\n  const { status: companyStatus } = useSelector((state) => state.company);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resultAction = await dispatch(fetchCompany(companyId));\n        unwrapResult(resultAction);\n      } catch (err) {\n        dispatch(\n          setAlert({\n            message: `Failed to get company: ${err.message}`,\n            alertType: 'alert-danger',\n          })\n        );\n      }\n    })();\n  }, [companyId, dispatch]);\n\n  const company = useSelector((state) => selectCompanyById(state, companyId));\n\n  return (\n    <>\n      {companyStatus === 'loading' && (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"progress w-50\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated bg-secondary w-100\"\n              role=\"progressbar\"\n            >\n              Loading...\n            </div>\n          </div>\n        </div>\n      )}\n      {companyStatus === 'succeeded' && company && (\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h3 className=\"card-title\">{company.name}</h3>\n            <CompanyHeadquarter data={company.headquarter} />\n          </div>\n        </div>\n      )}\n      {companyStatus === 'failed' && alert && (\n        <div className=\"d-flex justify-content-center\">\n          <Alert message={alert.message} alertType={alert.alertType} />\n        </div>\n      )}\n    </>\n  );\n}\n","import CompanyView from '../../Containers/CompanyView';\n\nexport default function CompanyDetail() {\n  return <CompanyView />;\n}\n","const OfficeDetails = ({ data }) => {\n  const properties = Object.entries(data).map(([key, value]) => (\n    <li key={key} className=\"list-group-item\">\n      <div className=\"row\">\n        <div className=\"col-5\">{key}</div>\n        <div className=\"col-7\">{value}</div>\n      </div>\n    </li>\n  ));\n\n  return <ul className=\"list-group\">{properties}</ul>;\n};\n\nexport default function Office({ office }) {\n  return (\n    <div className=\"col\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <OfficeDetails data={office} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';\n\nimport * as thunks from './companiesThunks';\n\nconst officesAdapter = createEntityAdapter();\n\nconst initialState = officesAdapter.getInitialState({\n  status: 'idle',\n});\n\nexport const officesSlice = createSlice({\n  name: 'offices',\n  initialState,\n  reducers: {\n    clearStorage: (state) => {\n      officesAdapter.removeAll(state);\n    },\n  },\n  extraReducers: {\n    [thunks.fetchOffices.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [thunks.fetchOffices.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      officesAdapter.upsertMany(state, action.payload);\n    },\n    [thunks.fetchOffices.rejected]: (state, action) => {\n      state.status = 'failed';\n    },\n  },\n});\n\nexport const { clearStorage } = officesSlice.actions;\n\nexport default officesSlice.reducer;\n\nexport const { selectAll: selectAllOffices, selectTotal: selectOfficesCount } =\n  officesAdapter.getSelectors((state) => state.offices);\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useParams } from 'react-router-dom';\n\nimport Alert from '../../Components/Alert';\nimport Office from '../../Components/Office';\nimport {\n  selectAllOffices,\n  clearStorage,\n} from '../../app/reducers/officesSlice';\nimport { selectAlert, setAlert } from '../../app/reducers/actionsSlice';\nimport { fetchOffices } from '../../app/reducers/companiesThunks';\n\nexport default function OfficesList() {\n  const { companyId } = useParams();\n  const alert = useSelector(selectAlert);\n  const { status: officesStatus } = useSelector((state) => state.offices);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resultAction = await dispatch(fetchOffices(companyId));\n        unwrapResult(resultAction);\n      } catch (err) {\n        dispatch(\n          setAlert({\n            message: `Failed to get offices: ${err.message}`,\n            alertType: 'alert-danger',\n          })\n        );\n      }\n    })();\n    return () => {\n      dispatch(clearStorage());\n    };\n  }, [companyId, dispatch]);\n\n  const offices = useSelector(selectAllOffices);\n\n  return (\n    <div className=\"overflow-auto offices-list\">\n      {officesStatus === 'loading' && (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"progress w-50\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated bg-secondary w-100\"\n              role=\"progressbar\"\n            >\n              Loading...\n            </div>\n          </div>\n        </div>\n      )}\n      {officesStatus === 'succeeded' && (\n        <div className=\"row row-cols-2 g-0\">\n          {offices.map((office) => (\n            <Office key={office.id} office={office} />\n          ))}\n        </div>\n      )}\n      {officesStatus === 'failed' && alert && (\n        <div className=\"d-flex justify-content-center\">\n          <Alert message={alert.message} alertType={alert.alertType} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import OfficesList from '../../Containers/OfficesList';\n\nexport default function CompanyOffices() {\n  return (\n    <>\n      <h2 className=\"text-center\">Offices list</h2>\n      <div className=\"container mt-4 p-0 shadow\">\n        <OfficesList />\n      </div>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nimport { fetchCompanyRentSum } from '../../app/reducers/companiesThunks';\nimport {\n  selectRequestStatus,\n  setBusy,\n  setIdle,\n} from '../../app/reducers/actionsSlice';\nimport Alert from '../../Components/Alert';\n\nexport default function CompanyRentSum() {\n  const { companyId } = useParams();\n  const dispatch = useDispatch();\n  const requestStatus = useSelector(selectRequestStatus);\n  const [rentValue, setRentValue] = useState();\n\n  useEffect(() => {\n    (async () => {\n      if (requestStatus === 'idle') {\n        try {\n          dispatch(setBusy());\n          const resultAction = await dispatch(fetchCompanyRentSum(companyId));\n          const originalPromiseResult = unwrapResult(resultAction);\n          setRentValue(\n            originalPromiseResult['offices__monthly_rent__sum'] ?? 'unset'\n          );\n        } catch (err) {\n          console.error('Failed to retrieve rent sum: ', err);\n        } finally {\n          dispatch(setIdle());\n        }\n      }\n    })();\n  }, [companyId]);\n\n  return (\n    <>\n      {requestStatus === 'pending' && (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"progress w-50\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated bg-secondary w-100\"\n              role=\"progressbar\"\n            >\n              Loading...\n            </div>\n          </div>\n        </div>\n      )}\n      {rentValue !== undefined && (\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h3 className=\"card-title\">Rent sum is: {rentValue}</h3>\n          </div>\n        </div>\n      )}\n      {requestStatus === 'failed' && alert && (\n        <div className=\"d-flex justify-content-center\">\n          <Alert message={alert.message} alertType={alert.alertType} />\n        </div>\n      )}\n    </>\n  );\n}\n","import CompanyRentSum from '../../Containers/CompanyRentSum';\n\nexport default function CompanyRent() {\n  return <CompanyRentSum />;\n}\n","import { useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { unwrapResult } from '@reduxjs/toolkit';\n\nimport {\n  clearAlert,\n  selectAlert,\n  selectRequestStatus,\n  setAlert,\n  setBusy,\n  setIdle,\n} from '../../app/reducers/actionsSlice';\nimport {\n  clearStorage,\n  selectAllOffices,\n} from '../../app/reducers/officesSlice';\nimport Alert from '../../Components/Alert';\nimport {\n  fetchOffices,\n  updateHeadquarter,\n} from '../../app/reducers/companiesThunks';\n\nexport default function ChangeHeadquarter() {\n  const { companyId } = useParams();\n  const alert = useSelector(selectAlert);\n  const { status: officesStatus } = useSelector((state) => state.offices);\n  const requestStatus = useSelector(selectRequestStatus);\n\n  const [dropdownValue, setDropdownValue] = useState();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const resultAction = await dispatch(fetchOffices(companyId));\n        unwrapResult(resultAction);\n      } catch (err) {\n        dispatch(\n          setAlert({\n            message: `Failed to get offices: ${err.message}`,\n            alertType: 'alert-danger',\n          })\n        );\n      }\n    })();\n    return () => {\n      dispatch(clearStorage());\n    };\n  }, [companyId, dispatch]);\n\n  const offices = useSelector(selectAllOffices);\n\n  useEffect(() => {\n    if (offices.length) {\n      const headquarter = offices.find((office) => office.headquarter_of);\n      setDropdownValue(headquarter?.id);\n    }\n  }, [offices]);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    if (requestStatus === 'idle') {\n      try {\n        dispatch(setBusy());\n        const resultAction = await dispatch(\n          updateHeadquarter({ id: companyId, headquarter: dropdownValue })\n        );\n        unwrapResult(resultAction);\n        dispatch(\n          setAlert({\n            message: 'Updated successfully',\n            alertType: 'alert-success',\n          })\n        );\n      } catch (err) {\n        console.error('Failed to update the headquarter: ', err);\n      } finally {\n        dispatch(setIdle());\n        await new Promise((r) => setTimeout(r, 2000));\n        dispatch(clearAlert());\n      }\n    }\n  };\n\n  return (\n    <>\n      {officesStatus === 'loading' && (\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"progress w-50\">\n            <div\n              className=\"progress-bar progress-bar-striped progress-bar-animated bg-secondary w-100\"\n              role=\"progressbar\"\n            >\n              Loading...\n            </div>\n          </div>\n        </div>\n      )}\n      {officesStatus === 'succeeded' && (\n        <>\n          {alert && (\n            <Alert message={alert.message} alertType={alert.alertType} />\n          )}\n          <form onSubmit={onSubmit}>\n            <div className=\"mb-3\">\n              <label className=\"form-label\">Select new Headquarter</label>\n              <select\n                value={dropdownValue}\n                onChange={(event) => setDropdownValue(event.target.value)}\n                className=\"form-select\"\n              >\n                {offices.map((office) => (\n                  <option key={office.id} value={office.id}>\n                    Office {office.id}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <button\n              disabled={requestStatus === 'pending'}\n              type=\"submit\"\n              className=\"btn btn-primary\"\n            >\n              Submit\n            </button>\n          </form>\n        </>\n      )}\n      {officesStatus === 'failed' && alert && (\n        <div className=\"d-flex justify-content-center\">\n          <Alert message={alert.message} alertType={alert.alertType} />\n        </div>\n      )}\n    </>\n  );\n}\n","import ChangeHeadquarter from '../../Containers/ChangeHeadquarter';\n\nexport default function CompanyHeadquarter() {\n  return (\n    <div className=\"container mt-4 p-3 shadow\">\n      <ChangeHeadquarter />\n    </div>\n  );\n}\n","import { NavLink } from 'react-router-dom';\n\nexport default function NavBar() {\n  return (\n    <nav className=\"navbar navbar-expand navbar-light\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item\">\n          <NavLink className=\"nav-link\" exact to=\"/\">\n            Home\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Main from './Pages/Main';\nimport NoMatch from './Pages/NoMatch';\nimport CompanyDetail from './Pages/CompanyDetail';\nimport CompanyOffices from './Pages/CompanyOffices';\nimport CompanyRent from './Pages/CompanyRent';\nimport CompanyHeadquarter from './Pages/CompanyHeadquarter';\nimport NavBar from './Components/NavBar';\n\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"container p-3 app-container\">\n      <Router>\n        <NavBar />\n\n        <Switch>\n          <Route path=\"/company/:companyId/headquarter\">\n            <CompanyHeadquarter />\n          </Route>\n          <Route path=\"/company/:companyId/rent\">\n            <CompanyRent />\n          </Route>\n          <Route path=\"/company/:companyId/offices\">\n            <CompanyOffices />\n          </Route>\n          <Route path=\"/company/:companyId/detail\">\n            <CompanyDetail />\n          </Route>\n          <Route exact path=\"/\">\n            <Main />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport companiesReducer from './reducers/companiesSlice';\nimport companyReducer from './reducers/companySlice';\nimport officesReducer from './reducers/officesSlice';\nimport actionsReducer from './reducers/actionsSlice';\n\nexport default configureStore({\n  reducer: {\n    companies: companiesReducer,\n    company: companyReducer,\n    offices: officesReducer,\n    actions: actionsReducer,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './app/store';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}